#!/usr/bin/env perl
# Copyright 2018-2022 Marco Fontani <MFONTANI@cpan.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# README: contrast
#
# Shows WCAG contrast for the FOREGROUND on BACKGROUND hex colors.
#
# Usage:
#
# - `contrast ff0000 000000`
# - `contrast ff0000 000000 -l`
# - `for f in ff0000 aa0000; for b in 000000 333333; do contrast "$f" "$b" -l; done`

use 5.020_001;
use warnings;
use List::Util qw<max min>;
use POSIX qw<floor>;
use open qw<:std :utf8>;

sub usage {
    my ($reason) = @_;

    my $usage = <<'END_USAGE';
Usage: contrast FOREGROUND BACKGROUND [-l]

Shows WCAG contrast for the FOREGROUND on BACKGROUND color.

FOREGROUND and BACKGROUND are meant to be HEX colors. The # is optional.

Options:
    -l      Show all data in one line.
Note options come LAST.

Examples:
    contrast ff0000 000000
    for f in ff0000 aa0000; for b in 000000 333333; do contrast "$f" "$b" -l; done
END_USAGE

    die "ERROR: $reason\n$usage\n"
        if $reason;
    warn "$usage\n";
    exit 0;
}

usage()
    if !scalar @ARGV
    || scalar grep { $_ eq '-h' || $_ eq '--help' } @ARGV;
my $foreground = shift @ARGV or usage('Need FOREGROUND & BACKGROUND');
my $background = shift @ARGV or usage('Need FOREGROUND & BACKGROUND');
my $one_line   = 0;
if (@ARGV && $ARGV[0] eq '-l') {
    $one_line = 1;
    shift @ARGV;
}
usage('Too many arguments.')
    if @ARGV;

usage("Foreground doesn't match #RRGGBB: '$foreground'\n")
    if $foreground !~ m!\A [#]? [0-9a-f]{6} \z!ixms;
usage("Background doesn't match #RRGGBB: '$background'\n")
    if $background !~ m!\A [#]? [0-9a-f]{6} \z!ixms;

my $contrast = contrast($foreground, $background);
say sprintf 'fg %s %s%son %s %s%s = %s%s = %8s contrast%s%s',
    as_ansi($foreground, '', $foreground), nice_hex2hsl($foreground),
    $one_line ? ' ' : "\n",
    as_ansi($background, '', $background), nice_hex2hsl($background),
    $one_line ? '' : "\n",
    as_ansi($foreground, $background, 'EXAMPLE'),
    $one_line ? '' : "\n",
    (sprintf '%.3f:1', $contrast),
    $one_line ? ' ' : "\n",
    aa_matrix($contrast, !$one_line);

exit 0;

sub hex2rgb {
    my ($rgb) = @_;
    my ($r, $g, $b) = $rgb =~ m!\A [#]? ([0-9a-f]{2}) ([0-9a-f]{2}) ([0-9a-f]{2}) \z!ixms;
    die "Cannot get R from '$rgb'" if !defined $r;
    die "Cannot get G from '$rgb'" if !defined $g;
    die "Cannot get B from '$rgb'" if !defined $b;
    return map { hex } ($r, $g, $b);
}

# https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-procedure
# https://stackoverflow.com/questions/9733288/how-to-programmatically-calculate-the-contrast-ratio-between-two-colors
# https://webaim.org/resources/contrastchecker/
sub luminance {
    my ($rgb) = @_;
    my ($r, $g, $b) = hex2rgb($rgb);
    my @luminance = map {
        my $v = $_;
        $v /= 255;
        $v <= 0.03928 ? $v / 12.92 : (($v + 0.055)/1.055) ** 2.4
    } ($r, $g, $b);
    return 0 +
        $luminance[0] * 0.2126 +
        $luminance[1] * 0.7152 +
        $luminance[2] * 0.0722 +
        0;
}

sub contrast {
    my ($rgb1, $rgb2) = @_;
    my $lum1 = luminance($rgb1);
    my $lum2 = luminance($rgb2);
    my $brightest = $lum1 > $lum2 ? $lum1 : $lum2;
    my $darkest   = $lum1 > $lum2 ? $lum2 : $lum1;
    return ($brightest + 0.05) / ($darkest + 0.05);
}

sub aa_matrix {
    my ($contrast, $use_newline) = @_;

    my $PASS = sprintf "\e[1;32m\N{HEAVY CHECK MARK}PASS\e[0m";
    my $FAIL = sprintf "\e[3;31m\N{HEAVY BALLOT X}FAIL\e[0m";

    return sprintf '%s AA  large%s%s AAA large%s%s AA  text%s%s AAA text',
        $contrast > 3.0 ? $PASS : $FAIL,
        $use_newline ? "\n" : ' ',
        $contrast > 5.0 ? $PASS : $FAIL,
        $use_newline ? "\n" : ' ',
        $contrast > 5.0 ? $PASS : $FAIL,
        $use_newline ? "\n" : ' ',
        $contrast > 7.0 ? $PASS : $FAIL,
}

sub as_ansi {
    my ($foreground, $background, $text) = @_;
    my $ansi = "\e[0m";
    if (length $foreground) {
        my ($r, $g, $b) = hex2rgb($foreground);
        $ansi .= sprintf "\e[38;2;%d;%d;%dm", $r, $g, $b;
    }
    if (length $background) {
        my ($r, $g, $b) = hex2rgb($background);
        $ansi .= sprintf "\e[48;2;%d;%d;%dm", $r, $g, $b;
    }
    $ansi .= $text;
    $ansi .= "\e[0m";
}

sub hex2hsl {
    my ($rgb) = @_;

    my ($r, $g, $b) = hex2rgb($rgb);

    $r /= 255;
    $g /= 255;
    $b /= 255;

    my $min   = min($r, $g, $b);
    my $max   = max($r, $g, $b);
    my $h     = ($max + $min) / 2;
    my $s     = ($max + $min) / 2;
    my $l     = ($max + $min) / 2;

    if ($max == $min) {
        $h = 0;
        $s = 0;
    }
    else {
        my $d = $max - $min;
        $s = $l > 0.5 ? $d / ( 2 - $max - $min ) : $d / ( $max + $min );
        if ($max == $r) {
            $h = ( $g - $b ) / $d + ($g < $b ? 6 : 0);
        }
        elsif ($max == $g) {
            $h = 2 + ( $b - $r ) / $d;
        }
        else { # $max == $b
            $h = 4 + ( $r - $g ) / $d;
        }
        $h /= 6;
    }
    return (floor($h * 360), floor($s * 100), floor($l * 100));
}

sub nice_hex2hsl {
    my ($color) = @_;
    # 0         1         2
    # 012345678901234567890123456
    # hsl(360', 100%, 100%)
    return sprintf '%-19s', sprintf "hsl(%d\N{DEGREE SIGN}, %d%%, %d%%)", hex2hsl($color);
}

sub hsl2rgb {
    my ($h, $s, $l) = @_;

    $h /= 360;
    $s /= 100;
    $l /= 100;

    my ($r, $g, $b);

    if ($s == 0.0) {
        $r = $l;
        $g = $l;
        $b = $l;
    }
    else {
        my $hue2rgb = sub {
            my ($p, $q, $t) = @_;
            $t += 1 if $t < 0;
            $t -= 1 if $t > 1;
            return $p + ($q - $p) * 6 * $t
                if $t < 1/6;
            return $q
                if $t < 1/2;
            return $p + ($q - $p) * (2/3 - $t) * 6
                if $t < 2/3;
            return $p;
        };
        my $q = $l < 0.5 ? $l * (1 + $s) : $l + $s - $l * $s;
        my $p = 2 * $l - $q;
        $r = $hue2rgb->($p, $q, $h + 1/3);
        $g = $hue2rgb->($p, $q, $h);
        $b = $hue2rgb->($p, $q, $h - 1/3);
    }

    return ( ceil($r * 255), ceil($g*255), ceil($b*255) );
}
