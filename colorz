#!/usr/bin/env perl
# Copyright 2018-2020 Marco Fontani <MFONTANI@cpan.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# README: colorz
#
# Displays:
# - all 256 ANSI colors your terminal hopefully supports
# - the "base" foreground and background colors
# - a truecolor "rainbow", useful to see if your terminal supports it.
#
# Provide one color number to see it used in the background color.
#
# Usage:
#
# - `colorz`
# - `colorz 22`
# - `colorz 22 23`

use strict;
use warnings;

binmode *STDOUT, ':encoding(UTF-8)';

{
    my ($fore, $back) = @ARGV;
    if (length $fore) {
        if (length $back) {
            for (@ARGV) {
                s/\Acolor//;
                my $l = 5 - length "$_";
                printf  "\x1b[38;5;%umcolor%u\x1b[0m\n", $_, $_;
            }
        }
        else {
            for (@ARGV) {
                s/\Acolor//;
                my $l = 5 - length "$_";
                printf  "\x1b[48;5;%umcolor%u\x1b[0m", $_, $_;
            }
        }
        exit 0;
    }
}

for my $spec (
        [ '0', '' ],
        [ '0;1', '/Bold' ],
        [ '0;2', '/Faint' ],
        [ '0;3', '/Italic' ],
        [ '0;4', '/Underline' ],
        [ '0;5', '/Blink' ],
        [ '0;7', '/Reverse' ],
        [ '0;9', '/Crossout' ],
        [ '0;53', '/Overline' ],
    ) {
    my ($mode, $description) = @$spec;
    for my $i (30..37) {
        neatansi("\e[$mode;${i}m", '18', "$mode;${i}m$description");
    }
    print "\n";
}

for my $i (40..47) {
    neatansi("\e[${i}m", 9, "\\e[${i}m");
}
print "\n";

for my $i (0..15) {
    my $fg = $i == 0 || $i == 8 ? 37 : 30;
    neatansi("\e[${fg}m\e[48;5;${i}m", 3, sprintf '%3s', $i);
}
print "\n";
for my $i (16..231) {
    my $fg = (($i - 16) % 36 > 10) ? 30 : 37;
    neatansi("\e[${fg}m\e[48;5;${i}m", 3, sprintf '%3s', $i);
    print "\n" if ($i-16)%36==35;
}
for my $i (232..255) {
    my $fg = $i > 243 || $i == 8 ? 30 : 37;
    neatansi("\e[${fg}m\e[48;5;${i}m", 3, sprintf '%3s', $i);
}
print "\n";

fullloophalf("",  "0", "0"); # R
fullloophalf("0", "",  "0"); # G
fullloophalf("0", "0", "");  # B
fullloophalf("",  "",  "0"); # RG
fullloophalf("0", "",  "");  # GB
fullloophalf("",  "0", "");  # RB
fullloophalf("",  "",  "");  # Greyscale

printf "\e[0m";
exit 0;

sub neatansi {
    my ($prefix, $size, $string) = @_;

    print $prefix;
    my $fmt = sprintf '%%-%ds', $size;
    my $padded = sprintf $fmt, $string;
    my $spaces = length($padded) - length($string);
    my $fmtspaces = sprintf '%%-%ds', $spaces;
    printf "%s\e[0m$fmtspaces", $string, ' ';
}

sub fullloop {
    my ($_r, $_g, $_b) = @_;
    for my $l (0..127, reverse 128..255) {
        my $r = length $_r ? $_r : $l;
        my $g = length $_g ? $_g : $l;
        my $b = length $_b ? $_b : $l;
        printf "\e[0;48;2;%s;%s;%sm ", $r, $g, $b;
        print "\e[0m\n" if $l == 127 || $l == 128;
    }
}

sub fullloophalf {
    my ($_r, $_g, $_b) = @_;
    for my $i (0..127) {
        printf "\e[0m";
        for my $x ([38,$i], [48,255-$i]) {
            my ($n, $l) = @$x;
            my $r = length $_r ? $_r : $l;
            my $g = length $_g ? $_g : $l;
            my $b = length $_b ? $_b : $l;
            printf "\e[%s;2;%s;%s;%sm", $n, $r, $g, $b;
        }
        print "\N{UPPER HALF BLOCK}";
    }
    print "\e[0m\n";
}
